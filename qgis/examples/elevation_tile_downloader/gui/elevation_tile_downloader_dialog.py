# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ElevationTileDownloaderDialog
                                 A QGIS plugin
 Downloads elevation tiles 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-01
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Christian Beiwinkel
        email                : christian@gis-ops.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.gui import QgisInterface
from qgis.PyQt import QtWidgets
from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsGeometry,
    QgsMapLayerProxyModel,
    QgsApplication,
    QgsRectangle,
    QgsCoordinateTransform,
    QgsCoordinateReferenceSystem,
    QgsFeature
)
from math import floor, ceil
from typing import List

from ..ui.elevation_tile_downloader_dialog_base_ui import Ui_ElevationTileDownloaderDialogBase
from ..core.task import DownloadTask


class ElevationTileDownloaderDialog(QtWidgets.QDialog, Ui_ElevationTileDownloaderDialogBase):

    def __init__(self, iface: QgisInterface, parent=None):
        """Constructor."""
        super(ElevationTileDownloaderDialog, self).__init__(parent)
        self.iface = iface
        self.setupUi(self)
        self.project = QgsProject.instance()
        self.layer_choice.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.download.clicked.connect(self.download_tiles)

    def download_tiles(self) -> None:
        """The plugin's main method; constructs the grid from selected input features,
        creates and starts the download task and connects the plugin to task signals.
        """
        poly_layer: QgsVectorLayer = self.layer_choice.currentLayer()
        crs = poly_layer.crs()
        out_dir: str = self.output_dir.filePath()
        add = self.add_to_map.isChecked()
        grid = []
        for feature in poly_layer.getFeatures():
            feature_geom = self.to_wgs84(feature.geometry(), crs)
            bbox: QgsRectangle = feature_geom.boundingBox()
            bounds = [bbox.xMinimum(), bbox.yMinimum(), bbox.xMaximum(), bbox.yMaximum()]
            rounded_bounds = [floor(x) if i < 2 else ceil(x) for i, x in enumerate(bounds)]
            grid_polys = self.create_grid_from_bounds(rounded_bounds)
            for grid_poly in grid_polys:
                if feature_geom.intersects(grid_poly):
                    grid.append(grid_poly)

        self.task = DownloadTask(grid, out_dir, add)
        self.task.begun.connect(self.hide)
        self.task.taskTerminated.connect(self.show)
        self.task.taskCompleted.connect(self._on_task_completion)
        self.task.next_tile.connect(lambda x: self.tile_number_message(x, len(grid)))
        QgsApplication.taskManager().addTask(self.task)

    @staticmethod
    def create_grid_from_bounds(bounds: List[int]) -> List[QgsGeometry]:
        """Creates regular grid of size 1x1 within specified bounds
        """
        grid_polys = []
        for x in range(bounds[0], bounds[2]):
            for y in range(bounds[1], bounds[3]):
                rect = QgsRectangle(x, y, x + 1, y + 1)
                grid_polys.append(QgsGeometry.fromRect(rect))

        return grid_polys

    def tile_number_message(self, i, total):
        self.iface.mainWindow().statusBar().showMessage(f"Downloading {i+1}/{total}")

    def _on_task_completion(self):
        self.iface.mainWindow().statusBar().showMessage("")
        self.close()

    @staticmethod
    def to_wgs84(geometry: QgsGeometry, own_crs: QgsCoordinateReferenceSystem) -> QgsGeometry:
        """
        Transforms the ``point`` to (``direction=ForwardTransform``) or from
        (``direction=ReverseTransform``) WGS84.
        """
        wgs84 = QgsCoordinateReferenceSystem.fromEpsgId(4326)
        project = QgsProject.instance()
        if own_crs != wgs84:
            xform = QgsCoordinateTransform(own_crs, wgs84, project)
            success = geometry.transform(xform)
        return geometry
