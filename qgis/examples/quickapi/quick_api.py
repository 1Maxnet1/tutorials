# -*- coding: utf-8 -*-
"""
/***************************************************************************
 QuickApi
                                 A QGIS plugin
 This plugin queries Open Elevation API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-12-30
        git sha              : $Format:%H$
        copyright            : (C) 2018 by GIS-OPS UG
        email                : nils@gis-ops.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path

import requests
from PyQt5.QtCore import QCoreApplication, QSettings, QTranslator, qVersion
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.core import (QgsCoordinateReferenceSystem, QgsCoordinateTransform,
                       QgsFeature, QgsGeometry, QgsPointXY, QgsProject,
                       QgsRectangle, QgsVectorLayer)

# Import the code for the dialog
from .quick_api_dialog import QuickApiDialog
from .resources import *


class QuickApi:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        self.project = QgsProject.instance()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'QuickApi_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Quick API')

        # Check if plugin was started the first time in current QGIS session
        # Will be set False once it was started
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('QuickApi', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None
    ):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/quick_api/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Reverse Geocode with Nominatim'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # Check if plugin was started the first time in current QGIS session
        # Will be set False once it was started
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Quick API'),
                action)
            self.iface.removeToolBarIcon(action)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start is True:
            self.first_start = False
            self.dlg = QuickApiDialog()
            # Display WGS84 as default
            self.dlg.crs_input.setCrs(QgsCoordinateReferenceSystem(4326))

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.

            lineedit_text = self.dlg.lineedit_xy.value()  # Returns a string
            crs_input = self.dlg.crs_input.crs()
            crs_out = QgsCoordinateReferenceSystem(4326)  # Define the output CRS

            try:
                # Convert GUI text to y, x (remember it's lat/long)
                lineedit_yx = [float(coord.strip()) for coord in lineedit_text.split(',')]  # Remove whitespace from text components
            except:
                # Display a generic error message box informing the user
                QMessageBox.critical(self.iface.mainWindow(),
                                     'QuickAPI error',
                                     "Did you really specify a coordinate in comma-separated Lat/Long?\nExiting...")
                return

            # Create QGIS Point Object
            point = QgsPointXY(*reversed(lineedit_yx))  # Reverse bcs QgsPointXY expects x, y

            # Transform if not WGS84
            if crs_input.authid() != 'EPSG:4326':
                xform = QgsCoordinateTransform(crs_input,
                                               crs_out,
                                               self.project)
                point_transform = xform.transform(point)
                point = point_transform  # also QgsPointXY

            # Create request
            user_agent = 'PyQGIS@GIS-OPS.com'  # User Agent is important and part of Nominatim's usage policy
            base_url = 'https://nominatim.openstreetmap.org/reverse'
            params = {'lat': point.y(), 'lon': point.x(), 'format': 'json'}

            response = requests.get(url=base_url, params=params, headers={'User-Agent': user_agent})
            response_json = response.json()

            # Handle the response. Only process if HTTP status code is 200. All other status codes imply an error.
            if response.status_code == 200:
                # Nominatim still sends a 200 status_code, even if geocoding failed
                if response_json.get('error'):
                    QMessageBox.critical(self.iface.mainWindow(),
                                         "Quick API error",
                                         "The request was not processed succesfully!\n\n"
                                         "Message:\n"
                                         "{}".format(response.json()))
                    return

                # Read response
                x = float(response_json['lon'])
                y = float(response_json['lat'])
                address = response_json['display_name']
                license = response_json['licence']

                # Create a new memory Point layer
                layer_out = QgsVectorLayer("Point?crs=EPSG:4326&field=address:string&field=license:string",
                                           "Nominatim Reverse Geocoding",
                                           "memory")

                # Build the output feature
                point_out = QgsPointXY(x, y)
                feature = QgsFeature()
                feature.setGeometry(QgsGeometry.fromPointXY(point_out))
                feature.setAttributes([address, license])  # Expects an ordered list as per attribute creation of layer

                # Add feature to layer
                layer_out.dataProvider().addFeature(feature)

                # Update Extents, add the layer to the canvas and zoom to boundingbox of response
                layer_out.updateExtents()
                self.project.addMapLayer(layer_out)


                # Construct Polygon from bounding box to be able to zoom to it later on
                bbox = [float(coord) for coord in response_json['boundingbox']]
                min_y, max_y, min_x, max_x = bbox
                bbox_geom = QgsGeometry.fromPolygonXY([[QgsPointXY(min_x, min_y),
                                                        QgsPointXY(min_x, max_y),
                                                        QgsPointXY(max_x, max_y),
                                                        QgsPointXY(max_x, min_y),
                                                       ]])

                # Transform bbox if map canvas has a different CRS
                if self.project.crs().authid() != 'EPSG:4326':
                    xform = QgsCoordinateTransform(crs_out,
                                                   self.project.crs(),
                                                   self.project)
                    bbox_geom.transform(xform)
                self.iface.mapCanvas().zoomToFeatureExtent(QgsRectangle.fromWkt(bbox_geom.asWkt()))
            else:
                # Notify user if smth went wrong during the request
                QMessageBox.critical(self.iface.mainWindow(),
                                     "Quick API error",
                                     "The request was not processed succesfully!\n\n"
                                     "HTTP status code: {}"
                                     "Message:\n"
                                     "{}".format(response.status_code, response.json()),)
                return
